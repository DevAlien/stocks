const string GETTEXT_PACKAGE = "...";

public class MainPage : Gtk.Window {
    public MainPage (Application app) {
        set_resizable (false);
        set_default_size (400, 480);

        var header = new Gtk.HeaderBar ();
        header.set_show_close_button (true);
        header.set_title (_("Simple Stocks"));
        
        var gtk_settings = Gtk.Settings.get_default ();

        var mode_switch = new Granite.ModeSwitch.from_icon_name ("display-brightness-symbolic", "weather-clear-night-symbolic");
          mode_switch.primary_icon_tooltip_text = _("Light background");
          mode_switch.secondary_icon_tooltip_text = _("Dark background");
          mode_switch.bind_property ("active", gtk_settings, "gtk_application_prefer_dark_theme");
          mode_switch.valign = Gtk.Align.CENTER;
          
        var preferences_button_icon = new Gtk.Image.from_icon_name ("open-menu", Gtk.IconSize.LARGE_TOOLBAR);
        var preferences_button = new Gtk.ToolButton (preferences_button_icon, null);
        preferences_button.tooltip_text = _("Preferences");
        
        preferences_button.clicked.connect (() => {
		        var pop = new Gtk.Popover (preferences_button);
                pop.set_modal (true);
                
                var button = new Gtk.Button.with_label ("Enter new API key");
                
                button.clicked.connect (() => {
	                app.OpenLanding ();
                });
                
                pop.add (button);
                pop.show_all ();
	        });
        
        header.pack_end (mode_switch);
        header.pack_start (preferences_button);
        
        set_titlebar (header);
        
        var grid = new CardGrid ();
        
        var api = new ApiKey ();
        string key = api.Get ();
        
        var cards = new Cards (grid, this, key);
        Local.LoadCards (cards);
        cards.AddCard ("empty");
        
        Gtk.ScrolledWindow scroll_view = new Gtk.ScrolledWindow (null, null);
        scroll_view.hscrollbar_policy = Gtk.PolicyType.NEVER;
        scroll_view.add (grid);
        
        var info_bar_and_scroll_view_container = new Gtk.Box (Gtk.Orientation.VERTICAL, 0);
        info_bar_and_scroll_view_container.pack_start (
            CreateInfoBar (cards), 
            false, 
            true, 
            0
        );
        info_bar_and_scroll_view_container.pack_start (scroll_view, true, true, 0);
        info_bar_and_scroll_view_container.show ();
        
        add (info_bar_and_scroll_view_container);
        
        GetNewCardDataEveryMinute (cards);
    }
    
    private void GetNewCardDataEveryMinute (Cards cards) {
        var timeout = Timeout.add (60000, () => {
            cards.UpdateCardData ();
            return true;
        });
    }
    
    private Gtk.InfoBar info_bar;
    private Gtk.Label info_label;
    
    private Gtk.InfoBar CreateInfoBar (Cards cards) {
        info_bar = new Gtk.InfoBar ();
        
        info_label = new Gtk.Label ("Warning");
        
        info_bar.get_content_area ().add (info_label);
        var info_bar_button = info_bar.add_button ("Try Again", 0);
        
        info_bar_button.clicked.connect (() => {
                cards.UpdateCardData ();
		        info_bar.set_revealed (false);
	        });
	        
        info_bar.set_revealed (false);
        
        return info_bar;
    }
    
    public void ShowInfoBar (string message, string type) {
        if (type == "Warning") {
            info_bar.message_type = Gtk.MessageType.WARNING;
        } else {
            info_bar.message_type = Gtk.MessageType.ERROR;
        }
        
        info_label.set_text (message);
        info_bar.set_revealed (true);
    }
}
